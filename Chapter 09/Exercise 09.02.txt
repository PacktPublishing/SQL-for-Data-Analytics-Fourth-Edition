-- Step 2
WITH 
  daily_sales as (
    SELECT 
      sales_transaction_date::DATE,
      SUM(sales_amount) as total_sales
    FROM sales
    GROUP BY 1
  ),
  sales_stats_30 AS (
    SELECT 
      sales_transaction_date, 
      total_sales,
      MAX(total_sales) OVER (
        ORDER BY sales_transaction_date 
        ROWS BETWEEN 30 PRECEDING and 1 PRECEDING
      ) AS max_sales_30
    FROM daily_sales
    ORDER BY 1
  )
SELECT 
  sales_transaction_date, 
  total_sales,
  max_sales_30
FROM 
  sales_stats_30
WHERE
  sales_transaction_date>='2021-12-31'; 

WITH 
  daily_sales as (
    SELECT 
      sales_transaction_date::DATE,
      SUM(sales_amount) as total_sales
    FROM sales
    GROUP BY 1
  ),
  sales_stats_30 AS (
    SELECT 
      sales_transaction_date, 
      total_sales,
      MAX(total_sales) OVER (
        ORDER BY sales_transaction_date 
        ROWS BETWEEN 30 PRECEDING and 1 PRECEDING
      ) AS max_sales_30
    FROM 
      daily_sales
    ORDER BY 1
  )
SELECT 
  sales_transaction_date, 
  total_sales,
  max_sales_30
FROM sales_stats_30
WHERE total_sales > max_sales_30 
AND sales_transaction_date>='2021-12-31';


-- Step 3
WITH daily_rolling_count as (
  SELECT 
    customer_id, 
    date_added::DATE,
    COUNT(
      CASE 
        WHEN street_address IS NOT NULL 
          THEN customer_id 
        ELSE NULL 
      END
) OVER (ORDER BY date_added::DATE) 
  AS non_null_add,
COUNT(*) OVER (ORDER BY date_added::DATE) 
  AS total_add
  FROM customers
)
SELECT DISTINCT
  date_added,
  non_null_add,
  total_add,
  1 - 1.0 * non_null_add/total_add
    AS null_address_percentage 
FROM daily_rolling_count
ORDER BY date_added DESC; 

